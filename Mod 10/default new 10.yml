AWSTemplateFormatVersion: 2010-09-09
Description: new bucket
Resources:
  generatedBucket:
    Type: AWS::S3::Bucket

###########
# awsstudent user & policy for Cloud9 in Vocareum
###########
  IAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: awsstudent

  IAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: IAMUser
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
            {
              "Sid": "Lab",
              "Action": [
                "cloudformation:*",
                "cloud9:*",
                "iam:Get*",
                "iam:List*",
                "kms:List*",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:CreateTags",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:Describe*",
                "ec2:TerminateInstances",
                "ec2:AllocateAddress",
                "ec2:AssociateAddress",
                "ec2:DescribeAddress",
                "ec2:CreateNatGateway",
                "ec2:CreateInternetGateway",
                "ec2:*Vpc*",
                "ec2:AttachInternetGateway",
                "ec2:*Subnet*",
                "ec2:DeleteInternetGateway",
                "ec2:ModifyVpcAttribute",
                "ec2:ReplaceNetworkAclAssociation",
                "ec2:DetachInternetGateway",
                "ec2:CreateVolume",
                "ec2:*Route*",
                "ec2:CreateSnapshot",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:DeleteVolume",
                "s3:Put*",
                "s3:Get*",
                "s3:Create*",
                "s3:Replicate*",
                "s3:Delete*",
                "s3:*Bucket*",
                "s3:List*",
                "s3:*Job*",
                "s3:ReplicateTags",
                "s3:RestoreObject",
                "s3:AbortMultipartUpload",
                "ssm:GetParameters",
                "sns:ListTopics"
              ],
              "Effect": "Allow",
              "Resource": "*",
              "Condition": {
                "NumericLessThanEqualsIfExists": {
                  "ec2:VolumeSize": "101"
                }
              }
            },
            {
              "Sid": "ServiceLinkedRoleAndPolicies",
              "Effect": "Allow",
              "Action": [
                "iam:CreateServiceLinkedRole",
                "iam:PassRole"
              ],
              "Resource": "*",
              "Condition": {
                "StringLikeIfExists": {
                  "iam:lambda": "lambda.amazonaws.com",
                  "iam.ec2": "ec2.amazonaws.com"
                }
              }
            },
            {
              "Sid": "RestrictInstanceActions",
              "Effect": "Allow",
              "Action": [
                "ec2:ModifyVolume",
                "ec2:ImportVolume",
                "ec2:ModifyVolumeAttribute",
                "ec2:ModifyFleet",
                "ec2:ImportSnapshot",
                "ec2:ResetInstanceAttribute",
                "ec2:CreateFleet",
                "ec2:EnableVolumeIO",
                "ec2:ImportInstance",
                "ec2:ModifyInstanceCreditSpecification",
                "ec2:ModifyInstanceAttribute",
                "ec2:RebootInstances",
                "ec2:RunInstances",
                "ec2:StartInstances"
              ],
              "Resource": "*",
              "Condition": {
                "StringEqualsIfExists": {
                  "ec2:Owner": "amazon"
                },
                "ForAllValues:StringLikeIfExists": {
                  "ec2:InstanceType": [
                    "*.nano",
                    "*.micro",
                    "*.small"
                  ],
                  "ec2:Tenancy": "default"
                },
                "StringNotEqualsIfExists": {
                  "ec2:PlacementGroupStrategy": "cluster"
                },
                "StringNotEqualsIgnoreCaseIfExists": {
                  "ec2:VolumeType": [
                    "io1",
                    "st1"
                  ]
                }
              }
            },
            {
              "Sid": "RestrictActions",
              "Effect": "Deny",
              "Action": [
                "s3:*ObjectLegalHold",
                "s3:*ObjectRetention",
                "s3:*BucketObjectLock*",
                "ec2:*Spot*",
                "ec2:*ReservedInstances*",
                "ec2:*Scheduled*",
                "ec2:*Purchase*",
                "ec2:EnableFastSnapshotRestores"
              ],
              "Resource": "*"
            },
            {
              "Sid": "RestrictCloud9",
              "Effect": "Deny",
              "Action": [
                  "cloud9:CreateEnvironmentEC2",
                  "cloud9:UpdateEnvironment"
              ],
              "Resource": "*",
              "Condition": {
                  "ForAnyValue:StringNotLikeIfExists": {
                      "cloud9:InstanceType": [
                          "*.nano",
                          "*.micro",
                          "*.small"
                      ]
                  }
              }
          }
        ]
      ManagedPolicyName: lab_policy
      Users:
        - awsstudent

  IAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    DependsOn: IAMUser
    Properties:
      Status: Active
      UserName: awsstudent

      
Outputs:
  AccessKey:
    Value:
      Ref: IAMUserAccessKey

  SecretKey:
    Value:
      'Fn::GetAtt':
        - IAMUserAccessKey
        - SecretAccessKey